initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.y <- data.matrix(as.integer(unlist(ds.train_sign[,1])))
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.y <- t(data.matrix(as.integer(unlist(ds.train_sign[,1]))))
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.x <- t(data.matrix(ds.train_sign[,-1]))
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.y <- t(data.matrix(ds.train_sign[,1]))
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.y <- t(data.matrix(unlist(ds.train_sign[,1]))
mdl.mxnet.dev <- mx.cpu()
mx.set.seed(42)
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.y <- t(data.matrix(unlist(ds.train_sign[,1])))
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.y <- t(as.array(unlist(ds.train_sign[,1])))
mdl.mxnet.train.y <- t(data.matrix(unlist(ds.train_sign[,1])))
mdl.mxnet.train.y <- t(as.array(data.matrix(unlist(ds.train_sign[,1]))))
mdl.mxnet.train.y <- t(as.array(data.matrix(unlist(ds.train_sign[,1]))))
mdl.mxnet.train.y <- t(as.vector(data.matrix(unlist(ds.train_sign[,1]))))
mdl.mxnet.train.y <- t((data.matrix(as.integer(unlist(ds.train_sign[,1])))))
mdl.mxnet.train.y <- t(as.array((data.matrix(as.integer(unlist(ds.train_sign[,1])))))
mdl.mxnet.dev <- mx.cpu()
mx.set.seed(42)
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.y <- t(as.array((data.matrix(as.integer(unlist(ds.train_sign[,1])))))
mdl.mxnet.dev <- mx.cpu()
mx.set.seed(42)
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.y <- t(as.array((data.matrix(as.integer(unlist(ds.train_sign[,1]))))))
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
X <- data.matrix(raw.train)
X <- data.matrix(raw.train[inTrain,])
y <- data.matrix(raw.train[-inTrain,])
train <- data.matrix(raw.train[inTrain,])
test <- data.matrix(raw.train[-inTrain,])
X <- train[,-1]
y <- train[,1]
X <- t(X/255)
test <- t(test/255)
table(y)
data <- mx.symbol.Variable("data")
fc1 <- mx.symbol.FullyConnected(data, name="fc1", num_hidden=128)
act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=train.x, y=train.y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
devices <- mx.cpu()
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
sign(X)
X <- t(sign(X))
View(X)
X <- train[,-1
X <- train[,-1]
X <- t(sign(X))
test <- t(sign(test))
data <- mx.symbol.Variable("data")
fc1 <- mx.symbol.FullyConnected(data, name="fc1", num_hidden=128)
act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")
devices <- mx.cpu()
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
data <- mx.symbol.Variable("data")
#fc1 <- mx.symbol.FullyConnected(data, name="fc1", num_hidden=128)
#act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
#fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
fc2 <- mx.symbol.FullyConnected(data, name="fc2", num_hidden=36)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")
devices <- mx.cpu()
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
pred.mxnet(predict(model, test))
pred.mxnet <- predict(model, test)
preds <- predict(model, test)
test <- t(sign(test[,-1]))
preds <- predict(model, test)
library(caret)
?confusionMatrix
install.packages("caret")
library(caret)
installed.packages(ggprot2)
installed.packages(ggplot2)
installed.packages("ggplot2")
install.packages("ggplot2")
library(caret)
library(ggplot2)
install.packages("colorspace")
library(caret)
install.packages("caret", dependencies = TRUE)
library(caret)
install.packages("quantreg")
library(caret)
preds <- predict(model, test)
confusionMatrix(preds, test[,1])
preds
table(preds)
preds <- apply(predict(model, test), 1, which.max)
preds <- apply(predict(model, test), 2, which.max)
preds
table(t(preds)
)
confusionMatrix(t(preds), test[,1])
dim(t(preds))
head(t(preds))
head(preds)
confusionMatrix(preds, test[,1])
confusionMatrix(preds, raw.train[-inTrain,1])
head(raw.train[-inTrain,1])
head(pred)
head(preds)
head(unlist(raw.train[-inTrain,1]))
head(as.factor(preds))
head(as.integer(raw.train[-inTrain,1]))
test <- data.matrix(raw.train[-inTrain,])
test <- data.matrix(raw.train[-inTrain,-1])
test <- t(sign(test))
preds <- apply(predict(model, test), 2, which.max)
head(preds)
head(preds-1)
preds <- apply(predict(model, test), 2, which.max-1)
preds <- apply(predict(model, test), 2, which.max) - 1
head(preds)
confusionMatrix(preds, raw.train[-inTrain,1])
source('~/.active-rstudio-document', echo=TRUE)
data <- mx.symbol.Variable("data")
fc1 <- mx.symbol.FullyConnected(data, name="fc1", num_hidden=256)
act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")
devices <- mx.cpu()
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
preds <- apply(predict(model, test), 2, which.max) - 1
confusionMatrix(preds, raw.train[-inTrain,1])
data <- mx.symbol.Variable("data")
fc0 <- mx.symbol.FullyConnected(data, name="fc0", num_hidden=512)
act0 <- mx.symbol.Activation(fc0, name="relu0", act_type="relu")
fc1 <- mx.symbol.FullyConnected(act0, name="fc1", num_hidden=256)
act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")
devices <- mx.cpu()
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
preds <- apply(predict(model, test), 2, which.max) - 1
confusionMatrix(preds, raw.train[-inTrain,1])
source('~/.active-rstudio-document', echo=TRUE)
inTrain <- createDataPartition(y = ds.train.all$label, p = .7, list = F)
train <- data.matrix(raw.train[inTrain,])
test <- data.matrix(raw.train[-inTrain,-1])
X <- train[,-1]
y <- train[,1]
X <- t(X/255)
#X <- t(sign(X))
test <- t(test/255)
#test <- t(sign(test))
data <- mx.symbol.Variable("data")
fc0 <- mx.symbol.FullyConnected(data, name="fc0", num_hidden=512)
act0 <- mx.symbol.Activation(fc0, name="relu0", act_type="relu")
fc1 <- mx.symbol.FullyConnected(act0, name="fc1", num_hidden=256)
act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")
devices <- mx.cpu()
mx.set.seed(0)
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
preds <- apply(predict(model, test), 2, which.max) - 1
confusionMatrix(preds, raw.train[-inTrain,1])
getwd()
train <- data.matrix(raw.train)
test <- data.matrix(raw.test)
X <- train[,-1]
y <- train[,1]
X <- t(X/255)
#X <- t(sign(X))
test <- t(test/255)
#test <- t(sign(test))
data <- mx.symbol.Variable("data")
fc0 <- mx.symbol.FullyConnected(data, name="fc0", num_hidden=512)
act0 <- mx.symbol.Activation(fc0, name="relu0", act_type="relu")
fc1 <- mx.symbol.FullyConnected(act0, name="fc1", num_hidden=256)
act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")
devices <- mx.cpu()
mx.set.seed(42)
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
preds <- apply(predict(model, test), 2, which.max) - 1
dim(test)
sub.mxnet <- data.frame(ImageId=1:ncol(test), Label=preds)
write.csv(sub.mxnet, "/submission/mxnet_V1.csv", row.names=FALSE, quote=FALSE)
?write.csv
getwd()
write.csv(sub.mxnet, paste0(getwd(), "/submission/mxnet_V1.csv"), row.names=FALSE, quote=FALSE)
data <- mx.symbol.Variable("data")
#fc0 <- mx.symbol.FullyConnected(data, name="fc0", num_hidden=512)
#act0 <- mx.symbol.Activation(fc0, name="relu0", act_type="relu")
#fc1 <- mx.symbol.FullyConnected(act0, name="fc1", num_hidden=256)
#act1 <- mx.symbol.Activation(fc1, name="relu1", act_type="relu")
#fc2 <- mx.symbol.FullyConnected(act1, name="fc2", num_hidden=64)
fc2 <- mx.symbol.FullyConnected(data, name="fc2", num_hidden=64)
act2 <- mx.symbol.Activation(fc2, name="relu2", act_type="relu")
fc3 <- mx.symbol.FullyConnected(act2, name="fc3", num_hidden=10)
softmax <- mx.symbol.SoftmaxOutput(fc3, name="sm")
devices <- mx.cpu()
mx.set.seed(42)
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=10, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
model <- mx.model.FeedForward.create(softmax, X=X, y=y,
ctx=devices, num.round=20, array.batch.size=100,
learning.rate=0.07, momentum=0.9,  eval.metric=mx.metric.accuracy,
initializer=mx.init.uniform(0.07),
epoch.end.callback=mx.callback.log.train.metric(100))
preds <- apply(predict(model, test), 2, which.max) - 1
--confusionMatrix(preds, raw.train[-inTrain,1])
sub.mxnet <- data.frame(ImageId=1:ncol(test), Label=preds)
write.csv(sub.mxnet, paste0(getwd(), "/submission/mxnet_V2.csv"), row.names=FALSE, quote=FALSE)
mdl.mxnet.data <- mx.symbol.Variable("mdl.mxnet.data ")
mdl.mxnet.hl1 <- mx.symbol.FullyConnected(mdl.mxnet.data, name = "mdl.mxnet.hl1", num_hidden = 36)
mdl.mxnet.act1 <- mx.symbol.Activation(mdl.mxnet.hl1, name = "relu1", act_type = "relu")
mdl.mxnet.hl3 <- mx.symbol.FullyConnected(mdl.mxnet.act1, name = "mdl.mxnet.hl3", num_hidden = 10)
mdl.mxnet.sm <- mx.symbol.SoftmaxOutput(mdl.mxnet.hl3, name = "mdl.mxnet.sm")
mdl.mxnet.train.x <- t(data.matrix(ds.train_sign[,-1]))
mdl.mxnet.train.y <- t(data.matrix(ds.train_sign[,1]))
mdl.mxnet.dev <- mx.cpu()
mx.set.seed(42)
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.train.x <- t(data.matrix(ds.train_sign[,-1]), rownames.force = F)
mdl.mxnet.train.x <- t(data.matrix(ds.train_sign[,-1], rownames.force = F))
mdl.mxnet.train.y <- t(data.matrix(ds.train_sign[,1], rownames.force = F))
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.data <- mx.symbol.Variable("mdl.mxnet.data")
mdl.mxnet.hl1 <- mx.symbol.FullyConnected(mdl.mxnet.data, name = "mdl.mxnet.hl1", num_hidden = 36)
mdl.mxnet.act1 <- mx.symbol.Activation(mdl.mxnet.hl1, name = "relu1", act_type = "relu")
mdl.mxnet.hl3 <- mx.symbol.FullyConnected(mdl.mxnet.act1, name = "mdl.mxnet.hl3", num_hidden = 10)
mdl.mxnet.sm <- mx.symbol.SoftmaxOutput(mdl.mxnet.hl3, name = "mdl.mxnet.sm")
mdl.mxnet.train.x <- t(data.matrix(ds.train_sign[,-1], rownames.force = F))
mdl.mxnet.train.y <- t(data.matrix(ds.train_sign[,1], rownames.force = F))
mx.set.seed(42)
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet.data <- mx.symbol.Variable("data")
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
train.x <- t(data.matrix(ds.train_sign[,-1], rownames.force = F))
train.y <- t(data.matrix(ds.train_sign[,1], rownames.force = F))
dev <- mx.cpu()
mx.set.seed(42)
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
train.x <- data.matrix(ds.train_sign[,-1], rownames.force = F)
train.y <- data.matrix(ds.train_sign[,1], rownames.force = F)
mdl.mxnet <- mx.model.FeedForward.create(mdl.mxnet.sm, X = mdl.mxnet.train.x, y = mdl.mxnet.train.y,
ctx = mdl.mxnet.dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
mdl.mxnet <- mx.model.FeedForward.create(sm, X = train.x, y = train.y,
ctx = dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
train.x <- t(data.matrix(ds.train_sign[,-1], rownames.force = F))
train.y <- data.vector(ds.train_sign[,1], rownames.force = F)
train.y <- as.vector(ds.train_sign[,1], rownames.force = F)
train.y <- as.vector(as.integer(ds.train_sign[,1], rownames.force = F))
range(train.y)
train.y <- as.vector(as.integer(ds.train_sign[,1], rownames.force = F)-1)
range(train.y)
mdl.mxnet <- mx.model.FeedForward.create(sm, X = train.x, y = train.y,
ctx = dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
data <- mx.symbol.Variable("data")
hl1 <- mx.symbol.FullyConnected(data, name = "hl1", num_hidden = 36)
act1 <- mx.symbol.Activation(hl1, name = "relu1", act_type = "relu")
hl3 <- mx.symbol.FullyConnected(act1, name = "hl3", num_hidden = 10)
sm <- mx.symbol.SoftmaxOutput(hl3, name = "sm")
mdl.mxnet <- mx.model.FeedForward.create(sm, X = train.x, y = train.y,
ctx = dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
ds.val.mxnet_sign <- t(data.matrix(ds.val_sign[,-1], rownames.force = F))
pred.mxnet <- apply(predict(model, ds.val.mxnet_sign), 2, which.max) - 1
pred.mxnet <- apply(predict(mdl.mxnet, ds.val.mxnet_sign), 2, which.max) - 1
mdl.mxnet
conf.mxnet <- confusionMatrix(pred.mxnet, ds.val_sign[,1])
conf.mxnet
data <- mx.symbol.Variable("data")
hl1 <- mx.symbol.FullyConnected(data, name = "hl1", num_hidden = 360)
act1 <- mx.symbol.Activation(hl1, name = "relu1", act_type = "relu")
hl2 <- mx.symbol.FullyConnected(data, name = "hl2", num_hidden = 36)
act2 <- mx.symbol.Activation(hl2, name = "relu2", act_type = "relu")
hl3 <- mx.symbol.FullyConnected(act2, name = "hl3", num_hidden = 10)
sm <- mx.symbol.SoftmaxOutput(hl3, name = "sm")
mdl.mxnet <- mx.model.FeedForward.create(sm, X = train.x, y = train.y,
ctx = dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
ds.val.mxnet_sign <- t(data.matrix(ds.val_sign[,-1], rownames.force = F))
pred.mxnet <- apply(predict(mdl.mxnet, ds.val.mxnet_sign), 2, which.max) - 1
conf.mxnet <- confusionMatrix(pred.mxnet, ds.val_sign[,1])
conf.mxnet
train.x <- t(data.matrix(sign(ds.train.all[,-1]), rownames.force = F))
train.y <- as.vector(as.integer(ds.train.all[,1], rownames.force = F)-1)
dev <- mx.cpu()
mx.set.seed(42)
mdl.mxnet <- mx.model.FeedForward.create(sm, X = train.x, y = train.y,
ctx = dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
pred.mxnet <- apply(predict(mdl.mxnet, sign(ds.test)), 2, which.max) - 1
head(sign(ds.test), )
pred.mxnet <- apply(predict(mdl.mxnet, sign(ds.test)), 2, which.max) - 1
pred.mxnet <- predict(mdl.mxnet, sign(ds.test)), 2, which.max) - 1
pred.mxnet <- predict(mdl.mxnet, sign(ds.test))
pred.mxnet <- predict(mdl.mxnet, data.matrix(sign(ds.test), rownames.force = F)
conf.mxnet <- confusionMatrix(pred.mxnet, ds.val_sign[,1])
pred.mxnet <- predict(mdl.mxnet, t(data.matrix(sign(ds.test), rownames.force = F)))
head(pred.mxnet)
head(t(pred.mxnet))
pred.mxnet <- apply(pred.mxnet, 2, which.max) - 1
head(pred.mxnet)
sub.mxnet <- data.frame(ImageId=1:nrow(ds.test), Label=pred.mxnet)
write.csv(sub.mxnet, paste0(getwd(), "/submission/mxnet_V3.csv"), row.names=FALSE, quote=FALSE)
train.x <- t(data.matrix(ds.train.all[,-1]/255), rownames.force = F)
train.x <- t(data.matrix(ds.train.all[,-1]/255), rownames.force = F))
ds.train.all[,-1]/255
train.x <- t(data.matrix(ds.train.all[,-1]/255, rownames.force = F))
train.y <- as.vector(as.integer(ds.train.all[,1], rownames.force = F)-1)
dev <- mx.cpu()
mx.set.seed(42)
mdl.mxnet <- mx.model.FeedForward.create(sm, X = train.x, y = train.y,
ctx = dev, num.round = 10,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
pred.mxnet <- predict(mdl.mxnet, t(data.matrix(ds.test/255, rownames.force = F)))
pred.mxnet <- apply(pred.mxnet, 2, which.max) - 1
sub.mxnet <- data.frame(ImageId=1:nrow(ds.test), Label=pred.mxnet)
write.csv(sub.mxnet, paste0(getwd(), "/submission/mxnet_V4.csv"), row.names=FALSE, quote=FALSE)
mdl.mxnet <- mx.model.FeedForward.create(sm, X = train.x, y = train.y,
ctx = dev, num.round = 20,
array.batch.size = 100,
learning.rate = 0.07, momentum = 0.9,
eval.metric = mx.metric.accuracy,
initializer = mx.init.uniform(0.07),
epoch.end.callback = mx.callback.log.train.metric(100))
pred.mxnet <- predict(mdl.mxnet, t(data.matrix(ds.test/255, rownames.force = F)))
pred.mxnet <- apply(pred.mxnet, 2, which.max) - 1
sub.mxnet <- data.frame(ImageId=1:nrow(ds.test), Label=pred.mxnet)
write.csv(sub.mxnet, paste0(getwd(), "/submission/mxnet_V5.csv"), row.names=FALSE, quote=FALSE)
vignette("mxnet")
?mxnet
